def stagePrepare(flag, apps, parallel_count) {
    stageList = []
    stageMap = [:]
    apps.eachWithIndex { app, path, i ->
        Integer lock_id = i % parallel_count
        if (flag == 'build') {
            stageMap.put(app, stageBuildCreate(app, path, lock_id))
        } else {
            stageMap.put(app, stageImageCreate(app, path, lock_id))
        }
    }
    stageList.add(stageMap)
    return stageList
}

def stageBuildCreate(app, path, lock_id) {
    return {
        stage(app) {
            //lock("Build-lock-${lock_id}") {
                agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
                steps {
                    container(name: 'kaniko') {
                        sh """
    /kaniko/executor --dockerfile=${path}/Dockerfile-build --context=${path}/ --destination=ghcr.io/dum307/${app}:3.0 --ignore-path=/product_uuid
                        """
                        builtApps.put(app, path)
                    }
                }
            //}
        }
    }
}

def stageImageCreate(app, path, lock_id) {
    return {
        stage(app) {
            lock("Image-create-lock-${lock_id}") {
                dir (path) {
                    sh "docker build -t ${app} -f Dockerfile-create ."
                }
            }
        }
    }
}


pipeline {
    agent none

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timestamps()
        // ansiColor('xtrem')
    }

    environment {
        SERVICES_FILE = 'apps/services.json'
    }

    stages {
        stage('Prepare') {
            agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
            steps {
                script {
                    apps = readJSON file: SERVICES_FILE
                    println (apps)
                    Integer PARALLEL_EXECUTE_COUNT = 2
                    buildStages = stagePrepare('build', apps, PARALLEL_EXECUTE_COUNT)
                    builtApps = [:]
                }
            }
        }


        stage('BUILD') {
            parallel {
                stage ('BUILD-productcatalogue') {
                    agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
                    steps {
                        container(name: 'kaniko') {
                            sh '''
            /kaniko/executor --dockerfile=apps/productcatalogue/Dockerfile-build --context=apps/productcatalogue/ --destination=ghcr.io/dum307/productcatalogue:v4.0 --ignore-path=/product_uuid
                            '''
                        }
                    }
                }
                stage ('BUILD-shopfront') {
                agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
                    steps {
                        container(name: 'kaniko') {
                            sh '''
            /kaniko/executor --dockerfile=apps/shopfront/Dockerfile-build --context=apps/shopfront/ --destination=ghcr.io/dum307/shopfront:v4.0 --ignore-path=/product_uuid
                            '''
                        }
                    }
                }
            }
        }




        // stage ('Parallel build') {
        //     steps {
        //         script {
        //             buildStages.each { stage ->
        //                 parallel stage
        //             }
        //         }
        //     }
        // }

        // stage ('Parallel create image') {
        //     steps {
        //         script {
        //             Integer PARALLEL_EXECUTE_COUNT = 2
        //             createImageStages = stagePrepare('image', builtApps, PARALLEL_EXECUTE_COUNT)
        //             createImageStages.each { stage ->
        //                 parallel stage
        //             }
        //         }
        //     }
        // }
    }
    post {
        always {
            cleanWs()
        }
    }
}