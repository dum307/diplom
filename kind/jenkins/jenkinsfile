import groovy.json.JsonBuilder

podYaml= """
kind: Pod
metadata:
  name: kaniko
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /kaniko/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: github
          items:
            - key: .dockerconfigjson
              path: config.json
"""

def generateStage(app, path, parallel_count, jobIndex) {
    Integer lock_id = jobIndex % parallel_count
    return {
        stage(app) {
            lock("Build-lock-${lock_id}") {
                podTemplate(yaml:podYaml)  {
                    node(POD_LABEL) {
                        container(name: 'kaniko') {
                            checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[credentialsId: 'github-http', url: 'https://github.com/dum307/apps.git']]])
                            // Each execution runs on its own node (pod)
                            sh """
                            /kaniko/executor --dockerfile=${path}/Dockerfile-build --context=${path}/ --destination=ghcr.io/dum307/${app}:v${BUILD_NUMBER} --ignore-path=/product_uuid
                            sleep 30
                            """
                        }
                    }
                }
            }    
        }
    }
}

def isChanged(diff, path) {
    for (file in diff) {
        if (file =~ path) {
            return true
        }
    }
}


pipeline {
    agent { label 'master' }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timestamps()
        // ansiColor('xtrem')
    }

    environment {
        APPS_FILE = 'apps/apps.json'
        RELEASE_NAME = "app"
        TG_TOKEN = credentials('TG_TOKEN')
        TG_CHAT_ID = credentials('TG_CHAT_ID')
    }

    stages {
        // stage('Prepare') {
        //     steps {
        //         script {
        //             apps = readJSON file: APPS_FILE
        //             CHANGED_APPS=[:]
        //             DIFF = sh(script: 'cat kind/gitdiff.sh | bash', returnStdout: true).trim()
        //             println DIFF
        //             apps.each { app, path ->
        //                 if (isChanged(DIFF, path)) {
        //                     CHANGED_APPS.put(app, path)
        //                 } 
        //                 // else{
        //                 //     CHANGED_APPS = apps
        //                 // }
        //             }
        //             println CHANGED_APPS
        //         }
        //     }
        // }
        
        stage('Prepare') {
            steps {
                script {
                    apps = readJSON file: APPS_FILE
                    CHANGED_APPS = [:]
                    DIFF = sh(script: 'cat kind/gitdiff.sh | bash', returnStdout: true).trim()
                    println DIFF
                    apps.each { app, path ->
                        if (DIFF.contains(path)) {
                            CHANGED_APPS.put(app, path)
                        } 
                        if (CHANGED_APPS.isEmpty()) {
                            CHANGED_APPS = apps
                        }
                    }
                    println CHANGED_APPS
                }
            }
        }

        // stage('Create List of Stages to run in Parallel') {
        //     steps {
        //         script {
        //             def jsonText = new JsonBuilder(CHANGED_APPS).toPrettyString()
        //             println(jsonText) // Вывести JSON-строку на экран
        //             Integer PARALLEL_EXECUTE_COUNT = 1
        //             //def apps = readFile('apps/apps.json')
        //             def map = readJSON text: jsonText
        //             //def map = ["productcatalogue" : "apps/productcatalogue" ,"shopfront" : "apps/shopfront", "stockmanager" : "apps/stockmanager"]
        //             parallel map.collectEntries { key, value ->
        //                 ["${key}" : generateStage(key, value, PARALLEL_EXECUTE_COUNT, map.keySet().toList().indexOf(key))]
        //             }
        //         }
        //     }
        // }

        // stage('Helm list') {
        //     agent { kubernetes { yamlFile 'kind/jenkins/jenkins-kubectl-template.yaml' } }
        //     steps {
        //         script {
        //             container(name: 'kubectl') {
        //                 IS_CHART_RELEASED = false
        //                 log = sh(returnStdout: true, script: "helm list -n ${BRANCH_NAME} --no-headers").trim()
        //                 println log
        //                 log.readLines().collect { line ->
        //                     if (line =~ RELEASE_NAME) {
        //                         IS_CHART_RELEASED = true
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }


        // stage('Telegram message') {
        //     agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
        //     steps {
        //         sh '''
        //         curl -s -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage?chat_id=${TG_CHAT_ID} --data-urlencode text="Need your approve"
        //         '''
        //     }
        // }

        // stage('Helm install') {
        //     agent { kubernetes { yamlFile 'kind/jenkins/jenkins-kubectl-template.yaml' } }
        //     steps {
        //         timeout(time: 15, unit: "MINUTES") {
        //             input message: "Confirm plan?", ok: "Apply"
        //         }
        //         script {
        //             container(name: 'kubectl') {
        //                 if (IS_CHART_RELEASED) {
        //                     sh "helm upgrade ${RELEASE_NAME} app-chart/ -n ${BRANCH_NAME} --set image.tag=v${BUILD_NUMBER}"
        //                 } else {
        //                     sh "helm install ${RELEASE_NAME} app-chart/ -n ${BRANCH_NAME} --set image.tag=v${BUILD_NUMBER}"
        //                 }
        //             }
        //         }        
        //     }
        // }

    }
    post {
        always {
            cleanWs()
        }
        success {
            sh '''
            curl -s -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage?chat_id=${TG_CHAT_ID} --data-urlencode text="Application deployed"
            '''
        }
        aborted {
            sh '''
            curl -s -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage?chat_id=${TG_CHAT_ID} --data-urlencode text="Application deploy aborted"
            '''
        }
        failure {
            sh '''
            curl -s -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage?chat_id=${TG_CHAT_ID} --data-urlencode text="Something wrong"
            '''
        }
    }
}