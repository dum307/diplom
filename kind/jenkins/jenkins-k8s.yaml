---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-jenkins
  namespace: jenkins
spec:
  ingressClassName: nginx
  rules:
  - host: jenkins
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: jenkins-service
            port:
              number: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
  namespace: jenkins
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path:   /
      prometheus.io/port:   '8080'
spec:
  selector:
    app: jenkins-server
  type: ClusterIP
  ports:
    - name: http-port
      port: 8080
      targetPort: 8080
    - name: jnlp-port  
      port: 50000
      targetPort: 50000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins-server
  template:
    metadata:
      labels:
        app: jenkins-server
    spec:
      # securityContext:
      #       fsGroup: 1000
      #       runAsUser: 1000
      # serviceAccountName: jenkins-admin
      imagePullSecrets:
      - name: github
      containers:
        - name: jenkins
          image: ghcr.io/dum307/jenkins-server:latest
          env:
          - name: JAVA_OPTS 
            value: "-Djenkins.install.runSetupWizard=false"
          - name: CASC_JENKINS_CONFIG
            value: "/var/jenkins_home/casc_configs"
          - name: JENKINS_ADMIN_ID
            value: "admin"
          - name: JENKINS_PASSWORD
            value: "${JENKINS_PASSWORD}"
          - name: JENKINS_URL
            value: "http://jenkins"
          - name: JENKINS_SA_TOKEN
            value: "${JENKINS_SA_TOKEN}"
          - name: GITHUB_TOKEN
            value: "${GITHUB_TOKEN}"
          # - name: GITHUB_TOKEN
          #   valueFrom:
          #     secretKeyRef:
          #       name: jenkins-secret
          #       value: github-token
          - name: TG_TOKEN
            value: "${TG_TOKEN}"
          # - name: TG_TOKEN
          #   valueFrom:
          #     secretKeyRef:
          #       name: jenkins-secret
          #       value: telegram-token
          - name: TG_CHAT_ID
            value: "${TG_CHAT_ID}"
          # - name: TG_CHAT_ID
          #   valueFrom:
          #     secretKeyRef:
          #       name: jenkins-secret
          #       value: telegram-chatid
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - name: httpport
              containerPort: 8080
            - name: jnlpport
              containerPort: 50000
          livenessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
            - name: jenkins-casc
              mountPath: /var/jenkins_home/casc_configs
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
              claimName: jenkins-pv-claim
        - name: jenkins-casc
          persistentVolumeClaim:
              claimName: jenkins-casc-pv-claim
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv-volume
  labels:
    type: local
spec:
  storageClassName: local-storage
  claimRef:
    name: jenkins-pv-claim
    namespace: jenkins
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/ubuntu/jenkins
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-casc-pv-volume
  labels:
    type: local
spec:
  storageClassName: local-storage
  claimRef:
    name: jenkins-casc-pv-claim
    namespace: jenkins
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /home/ubuntu/casc_configs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pv-claim
  namespace: jenkins
spec:
  storageClassName: local-storage
  volumeName: jenkins-pv-volume
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-casc-pv-claim
  namespace: jenkins
spec:
  storageClassName: local-storage
  volumeName: jenkins-casc-pv-volume
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi