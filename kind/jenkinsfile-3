// def stagePrepare(flag, apps, parallel_count) {
//     stageList = []
//     stageMap = [:]
//     apps.eachWithIndex { app, path, i ->
//         Integer lock_id = i % parallel_count
//         if (flag == 'build') {
//             stageMap.put(app, stageBuildCreate(app, path, lock_id))
//         } else {
//             stageMap.put(app, stageImageCreate(app, path, lock_id))
//         }
//     }
//     stageList.add(stageMap)
//     return stageList
// }

// def stageBuildCreate(app, path, lock_id) {
//     return {
//         stage(app) {
//             //lock("Build-lock-${lock_id}") {
//                 agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
//                 steps {
//                     container(name: 'kaniko') {
//                         sh """
//     /kaniko/executor --dockerfile=${path}/Dockerfile-build --context=${path}/ --destination=ghcr.io/dum307/${app}:3.0 --ignore-path=/product_uuid
//                         """
//                         builtApps.put(app, path)
//                     }
//                 }
//             //}
//         }
//     }
// }

// def stageImageCreate(app, path, lock_id) {
//     return {
//         stage(app) {
//             lock("Image-create-lock-${lock_id}") {
//                 dir (path) {
//                     sh "docker build -t ${app} -f Dockerfile-create ."
//                 }
//             }
//         }
//     }
// }


pipeline {
    agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        timestamps()
        // ansiColor('xtrem')
    }

    environment {
        SERVICES_FILE = 'apps/services.json'
        RELEASE_NAME = "app"
    }

    stages {
        // stage('Prepare') {
        //     //agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
        //     steps {
        //         script {
        //             apps = readJSON file: SERVICES_FILE
        //             println (apps)
        //             Integer PARALLEL_EXECUTE_COUNT = 2
        //             buildStages = stagePrepare('build', apps, PARALLEL_EXECUTE_COUNT)
        //             builtApps = [:]
        //         }
        //     }
        // }

//         stage('BUILD-productcatalogue') {
//             agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
//             steps {
//                 container(name: 'kaniko') {
//                     sh '''
// /kaniko/executor --dockerfile=apps/productcatalogue/Dockerfile-build --context=apps/productcatalogue/ --destination=ghcr.io/dum307/productcatalogue:v${BUILD_NUMBER} --ignore-path=/product_uuid
//                     '''
//                 }
//             }
//         }

//         stage('BUILD-shopfront') {
//             agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
//             steps {
//                 container(name: 'kaniko') {
//                     sh '''
// /kaniko/executor --dockerfile=apps/shopfront/Dockerfile-build --context=apps/shopfront/ --destination=ghcr.io/dum307/shopfront:v${BUILD_NUMBER} --ignore-path=/product_uuid
//                     '''
//                 }
//             }
//         }

//         stage('BUILD-stockmanager') {
//             agent { kubernetes { yamlFile 'kind/jenkins/jenkins-pod-template.yaml' } }
//             steps {
//                 container(name: 'kaniko') {
//                     sh '''
// /kaniko/executor --dockerfile=apps/stockmanager/Dockerfile-build --context=apps/stockmanager/ --destination=ghcr.io/dum307/stockmanager:v${BUILD_NUMBER} --ignore-path=/product_uuid
//                     '''
//                 }
//             }
//         }
    

        stage('Helm list') {
            agent { kubernetes { yamlFile 'kind/jenkins/jenkins-kubectl-template.yaml' } }
            steps {
                script {
                    container(name: 'kubectl') {
                        IS_CHART_RELEASED = false
                        log = sh(returnStdout: true, script: "helm list --no-headers").trim()
                        println log
                        log.readLines().collect { line ->
                            if (line =~ RELEASE_NAME) {
                                IS_CHART_RELEASED = true
                            }
                        }
                    }
                }
            }
        }


        // stage('Deploy Plan') {
        //     agent { kubernetes { yamlFile 'kind/jenkins/jenkins-kubectl-template.yaml' } }
        //     steps {
        //         script {
        //             container(name: 'kubectl') {
        //                 log = sh(returnStdout: true, script: "helm install app app-chart/ --set image.tag=${BUILD_NUMBER} --dry-run")
        //                 println log
        //             }
        //         }
        //     }
        // }

        stage('Helm install') {
            agent { kubernetes { yamlFile 'kind/jenkins/jenkins-kubectl-template.yaml' } }
            steps {
                input message: "Confirm plan?", ok: "Apply"
                script {
                    container(name: 'kubectl') {
                        if (IS_CHART_RELEASED) {
                            sh "helm upgrade ${RELEASE_NAME} app-chart/ --set image.tag=v9"
                        } else {
                            sh "helm install ${RELEASE_NAME} app-chart/ --set image.tag=v9"
                        }
                    }
                }             
            }
        }


        // stage('Deploy') {
        //     agent { kubernetes { yamlFile 'kind/jenkins/jenkins-kubectl-template.yaml' } }
        //     steps {
        //         input message: "Confirm plan?", ok: "Apply"
        //         container(name: 'kubectl') {
        //             sh '''
        //             helm upgrade app app-chart/ --set image.tag=v${BUILD_NUMBER}
        //             '''
        //         }
        //     }
        // }

    }
    post {
        always {
            cleanWs()
        }
    }
}